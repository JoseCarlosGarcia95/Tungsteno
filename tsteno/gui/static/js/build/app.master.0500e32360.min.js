class Tungsteno{constructor(options){let Controllers={notebook:Notebook};this.options=options,this.controller=new Controllers[this.options.app](this),this.controller.initController()}getOption(key){return this.options[key]}}class Cell{constructor(notebook,cell_id){this.notebook=notebook,this.cell_id=cell_id,this.input="",this.output_type=null,this.hide_input=!1,this.loading=!1,this.evaluator=this.notebook.getTungsteno().getOption("evaluator"),this.processors={default:new DefaultProcessor,plot:new PlotProcessor,error:new ErrorProcessor}}hideInput(){this.output_type&&(this.hide_input=!this.hide_input)}evaluate(){this.loading=!0,this.evaluator(this.input)(function(result){this.processors.hasOwnProperty(result.processor)&&this.processors[result.processor].eval(result,this),this.loading=!1}.bind(this)),this.notebook.createCellIfNeeded(this)}}class Notebook{constructor(tungsteno){this.vues={},this.cell_id_generator=0,this.tungsteno=tungsteno,this.cells=[],this.createCell()}getTungsteno(){return this.tungsteno}initController(){Vue.component("editable",{template:'<div contenteditable="true" v-once v-html="value" :value="value" @input="$emit(\'input\', $event.target.innerHTML)"></div>',props:["value"],watch:{value:function(newValue){document.activeElement!=this.$el&&(this.$el.innerHTML=newValue)}}}),Vue.component("plotly",{template:"<div></div>",props:["data","options"],updated(){Plotly.newPlot(this.$el,this.data,this.options)},mounted(){Plotly.newPlot(this.$el,this.data,this.options)}}),this.vues.notebook=new Vue({el:".notebook",data:{cells:this.cells,loading_color:"white"},methods:{disableShiftEnter:function($event){if($event.shiftKey&&13===$event.keyCode)return $event.preventDefault(),!1}}})}createCellIfNeeded(cell){this.cells[cell.cell_id+1]||this.createCell()}createCell(){this.cells.push(new Cell(this,this.cell_id_generator++))}}class DefaultProcessor{eval(result,cell){cell.output=result.output,cell.output_type="default"}}class ErrorProcessor{eval(result,cell){cell.output=result.error.replace(/(?:\r\n|\r|\n)/g,"<br>"),cell.output=cell.output.replace(/(\s)/g,"&nbsp;"),cell.output_type="error"}}const PLOT_POINTS=100;function linspace(startValue,stopValue,cardinality){for(var arr=[],step=(stopValue-startValue)/(cardinality-1),i=0;i<cardinality;i++)arr.push(startValue+step*i);return arr}class PlotProcessor{eval(result,cell){cell.plot||(cell.plot={}),cell.plot.options={};let x=linspace(0,10,PLOT_POINTS),y=x.map(x=>Math.sin(x));cell.plot.data=[{x:x,y:y}],cell.output_type="plot"}}